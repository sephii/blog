Why using select_related() can be dangerous
===========================================

:date: 2014-02-28
:category: Django
:tags: django
:status: draft

As you (should) already know, `Django's
select_related <https://docs.djangoproject.com/en/dev/ref/models/querysets/#select-related>`_
allows you to improve the performance of your applications by using joins to
fetch related objects, thus reducing the number of executed SQL queries.

I was wondering why ``select_related()`` wasn't used by default when performing
lookups and it only came clear to me when I hit a weird bug after trying to
optimize an app.

Let's consider this model:

.. code-block:: python

    class Game(models.Model):
        winner = models.ForeignKey(CustomUser)
        loser = models.ForeignKey(CustomUser)
        date = models.DateField()

        def update_score(self):
            self.winner.wins += 1
            self.loser.defeats += 1

            self.winner.save()
            self.loser.save()

Now let's take this piece of code:

.. code-block:: python

    CustomUser.objects.update(wins=0, defeats=0)
    game = Game.objects.all()

    for game in games:
        game.update_score()

This will reset the scores of all the users and recalculate them. So far so
good. Now let's imagine our app makes a heavy use of the ``Game`` model and
we'd like to reduce the number of SQL queries generated by the default
lookups:

.. code-block:: python

    class GameManager(models.Manager):
        def get_queryset():
            return super(GameManager, self).get_queryset().select_related(
                'winner', 'loser'
            )

    class Game(models.Model):
        # ...

        objects = GameManager()

Now if you run again the code that calls ``game.update_score()``, you'll notice
every user will end up with only 1 win and 1 defeat, regardless of the number
of games she won or lost.

The difference is that in the first case, when we fetched the ``Game`` objects
with ``Game.objects.all()``, we got something like this:

== ========= ======== ==========
id winner_id loser_id date
== ========= ======== ==========
1  1         2        2014-02-27
2  1         2        2014-02-28
3  2         1        2014-02-28
== ========= ======== ==========

By adding the ``select_related()``, we got something like that:

== ========= ======== ========== ==== =======
id winner_id loser_id date       wins defeats
== ========= ======== ========== ==== =======
1  1         2        2014-02-27 0    0
2  1         2        2014-02-28 0    0
3  2         1        2014-02-28 0    0
== ========= ======== ========== ==== =======
